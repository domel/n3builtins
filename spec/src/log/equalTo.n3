@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix fnon: <https://w3id.org/function/ontology/n3#> .

log:equalTo a fno:Function ;
    vs:term_status  "testing" ;
    fnon:tldr """Checks whether the subject and object N3 resources are the same. 
Can also be used to bind values to variables (see examples).""" ;
    dcterms:comment """`true` if and only if `$s` and `$o` are the same N3 resource.
Not to be confused with owl:sameAs.""" ;
    rdfs:seeAlso log:notEqualTo ;
    fno:example ( 
            [ a fno:Test ;
                dcterms:description """
Determine if 1 is equal to 1 and "Cat" is equal to "Cat" and { :A :B :C . :D :E :F } is equal to { :D :E :F . :A :B :C }.
            """ ;
                rdfs:seeAlso <> ;
                fno:expression """
@prefix : <http://example.org/>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

{
    1 log:equalTo 1 .
    "Cat" log:equalTo "Cat" .
    { :A :B :C . :D :E :F . } log:equalTo { :D :E :F . :A :B :C . } .
}
=>
{
    :result :is true .
} . 
            """ ;
                fno:result """
@prefix : <http://example.org/>.
:result :is true. 
            """ 
            ] 

            [ a fno:Test ;
                dcterms:description """
Determine if "Cat" is equal to "Cat"@en .
            """ ;
                rdfs:seeAlso <> ;
                fno:expression """
@prefix : <http://example.org/>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

{
    # This will fail
    "Cat" log:equalTo "Cat"@en .
}
=>
{
    :result :is true .
} . 
            """ ;
                fno:result """
@prefix : <http://example.org/>.
# no results
            """ 
            ] 

            [ a fno:Test ;
                dcterms:description """
Assign a value to an existential or universal variable.
            """ ;
                rdfs:seeAlso <> ;
                fno:expression """
@prefix : <http://example.org/>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

{
    _:x log:equalTo 42 .
    ?q  log:equalTo "Cat"@en .

    # This will fail because _:x is already assigned to 42 .
    # _:x log:equalTo 17 .
}
=>
{
    :result :is ?q .
} . 
            """ ;
                fno:result """
@prefix : <http://example.org/>.
:result :is "Cat"@en .
            """ 
            ] 

            [ a fno:Test ;
                dcterms:description """
Assign values from the object list to universal variables given in the subject list. 
This can be compared to "destructuring" or "unpacking" in programming languages such as JavaScript or Python.
In contrast to those languages, however, it works in either direction in N3.
In general, this works because an effort is made to ensure the truth of builtin statements in N3.
            """ ;
                rdfs:seeAlso <> ;
                fno:expression """
@prefix : <http://example.org/>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

{
    ( ?x ?y ?z ) log:equalTo ( 1 2 3 )
}
=>
{
    :result :is ?x , ?y , ?z .
} . 
            """ ;
                fno:result """
@prefix : <http://example.org/>.
:result :is 1 , 2 , 3 . # objects can be in any order
            """ 
            ] 

            [ a fno:Test ;
                dcterms:description """
Assign values from the object list to universal variables given in the subject list. 
This can be compared to "destructuring" or "unpacking" in programming languages such as JavaScript or Python.
In contrast to those languages, however, it works in either direction in N3.
In general, this works because an effort is made to ensure the truthfulness of builtin statements in N3.
            """ ;
                rdfs:seeAlso <> ;
                fno:expression """
@prefix : <http://example.org/>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

{
    ( "War and Peace" "Leo Tolstoy" 1225 ) log:equalTo ( ?title ?author ?numPages ) .
}
=>
{
    :result :is ?title , ?author , ?numPages .
} . 
            """ ;
                fno:result """
@prefix : <http://example.org/>.
:result :is "War and Peace" , "Leo Tolstoy" , 1225 . # objects can be in any order
            """ 
            ] 
    ) ;
    fno:name "equalTo" ;
    fno:parameter (
        [ a fno:Parameter ;
            fno:predicate "$s" ;
            fno:mode "?" ;
            fnon:position fnon:subject ;
        ] [ a fno:Parameter ;
            fno:predicate "$o" ;
            fno:mode "?" ;
            fnon:position fnon:object ;
        ] ) .
