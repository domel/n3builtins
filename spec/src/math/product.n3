@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix fnon: <https://w3id.org/function/ontology/n3#> .

math:product a fno:Function ;
    vs:term_status  "testing" ;
    vs:moreinfo "it is unclear for me why exponentiation can work in reverse, but product can't be used to calculate quotients @phochste" ;
    fnon:tldr "Calculates the object as the product of the numbers given in the subject list." ;
    dcterms:description """`true` if and only if `$o` is the arithmetic product of all numbers `$s.i`""" ;
    fno:example ( 
            [ a fno:Test ;
                dcterms:description """
Calculate the product of 2 and 21.
            """ ;
                rdfs:seeAlso <> ;
                fno:expression """
@prefix : <http://example.org/>.
@prefix math: <http://www.w3.org/2000/10/swap/math#> .

:Let :param (2 21) .

{
    :Let :param ?param .
    ?param math:product ?result .
}
=>
{
    :result :is ?result .
} .
            """ ;
                fno:result """
@prefix : <http://example.org/>.
:result :is 42.
            """ 
            ] 

            [ a fno:Test ;
                dcterms:description """
Calculate the product of 2,4,6, and 8 .
            """ ;
                rdfs:seeAlso <> ;
                fno:expression """
@prefix : <http://example.org/>.
@prefix math: <http://www.w3.org/2000/10/swap/math#> .

:Let :param (2 4 6 8) .

{
    :Let :param ?param .
    ?param math:product ?result .
}
=>
{
    :result :is ?result .
} .
            """ ;
                fno:result """
@prefix : <http://example.org/>.
:result :is 384.
            """ 
            ] 

    ) ;
    fno:name "product" ;
    fno:parameter ( 
        [ a fno:Parameter ;
            dcterms:description "" ;
            fno:mode "+" ;
            fno:predicate "$s" ;
            fno:type rdf:List ;
            fnon:position fnon:subject ;
            fnon:listElementType [
                fno:predicate "$s.i" ;
                fno:mode "+" ;
                fno:type 
                    [   rdf:type rdfs:Datatype ;
                        owl:unionOf ( xsd:decimal xsd:double xsd:float )
                    ]
            ]

        ] [ a fno:Parameter ;
            dcterms:description "" ;
            fno:mode "-" ;
            fno:predicate "$o" ;
            fnon:position fnon:object ;
            fno:type 
                    [   rdf:type rdfs:Datatype ;
                        owl:unionOf ( xsd:decimal xsd:double xsd:float )
                    ]
        ] ) .
