<pre class='metadata'>
Title: N3 Builtin Functions
Shortname: functions
Level: 1
Status: LD
URL: https://w3c.github.io/N3/spec/
TR: https://w3c.github.io/N3/spec/
Previous Version: https://w3c.github.io/N3/spec/builtins/0.1/
Editor: William Van Woensel, [University of Ottawa](https://www.uottawa.ca/), william.van.woensel@gmail.com 
Editor: Patrick Hochstenbach, [IDLab - Ghent University](https://knows.idlab.ugent.be/), Patrick.Hochstenbach@ugent.be
!Contributors: Tim Duval, [UnifyLogic](http://unifylogic.ai), tim.duval@unifylogic.ai
!Contributors: Dominik Tomaszuk, [University of Bialystok](https://uwb.edu.pl/en/), d.tomaszuk@uwb.edu.pl

Abstract: This document defines the Notation 3 builtins. These are predicates with pre-defined semantics for querying, manipulating and reasoning over N3 documents.
Markup Shorthands: markdown yes 
Boilerplate: conformance no, index no
</pre>

<style>
table {
  margin: 25px auto;
  border-collapse: collapse;
  border: 1px solid #eee;
  border-bottom: 2px solid #005A9C;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th, table td {
  color: #999;
  border: 1px solid #eee;
  padding: 12px 12px;
  border-collapse: collapse;
}
table th {
  background: #005A9C;
  color: #fff;
}
table tbody > tr > th {
  background: #fff;
  color: #005A9C;
}
table th.last {
  border-right: none;
}
.schema_where {
  margin-top: -15px;
}
.schema_datatypes {
  margin-left: 25px;
}
.schema_param_descr {
  font-size: 0.9em
}
.schema_param_datatype {
  font-size: 0.95em;
  font-style: italic;
}
</style>


Status of this Document {#statusofdocument}
=====================


Builtin namespaces {#builtinnamespaces}
=====================

<abbr title="Notation3">N3</abbr> defines a core set of [builtins](#builtins):
      Builtins are grouped into distinct vocabularies depending on the N3 triple elements they operate on
      (e.g., string, list), or their particular topic (e.g., time, cryptography, log).
      Builtins are denoted by a controlled IRI defined in one of the core builtin namespaces:</p>
    <ul>
      <li>[Crypto](http://www.w3.org/2000/10/swap/crypto#) –
        [http://www.w3.org/2000/10/swap/crypto#](http://www.w3.org/2000/10/swap/crypto#),
      </li>
      <li>[List](http://www.w3.org/2000/10/swap/list#) –
        [http://www.w3.org/2000/10/swap/list#](http://www.w3.org/2000/10/swap/list#),
      </li>
      <li>[Log](http://www.w3.org/2000/10/swap/log#) –
        [http://www.w3.org/2000/10/swap/log#](http://www.w3.org/2000/10/swap/log#),
      </li>
      <li>[Math](http://www.w3.org/2000/10/swap/math#) –
        [http://www.w3.org/2000/10/swap/math#](http://www.w3.org/2000/10/swap/math#),
      </li>
      <li>[String](http://www.w3.org/2000/10/swap/string#) –
        [http://www.w3.org/2000/10/swap/string#](http://www.w3.org/2000/10/swap/string#)
      </li>
      <li>[Time](http://www.w3.org/2000/10/swap/time#) –
        [http://www.w3.org/2000/10/swap/time#](http://www.w3.org/2000/10/swap/time#).
      </li>
    </ul>

Builtin arguments {#builtinarguments}
=====================
<p>An N3 [builtin](#builtins) operates on its arguments. An [argument]() is a placeholder that refers to an
      N3 triple element from the [builtin statement](), i.e., the N3 statement where the
      builtin acts as a predicate.
    </p>
    <p>In the simplest case, there are two arguments that respectively refer to the subject and object of the
      builtin statement. For instance, statements such as `1 math:lessThan 2` have two arguments `$s` and
      `$o`, which is written as `$s math:lessThan $o`.</p>
    <p>Arguments can be also represent a "deconstruction" of the subject or object in case of lists. For
      instance, `(1 2 3) math:sum 6` will have arguments `$s.1` .. `$s.n` and `$o`, which is written as `($s.1
      .. $s.n) math:sum $o`. 
</p>

## Argument modes ## {#argumentmodes}
<p>For a given builtin, an argument will have a defined >argument mode
        that stipulates whether it should be bound or not in the builtin statement.
        This binding requirement determines whether the argument can serve as builtin input, output, or both.
        Note that these modes are mostly based on [Prolog argument modes](https://www.swi-prolog.org/pldoc/man?section=argmode).
      </p>
      <ul>
        <li>`++`: input argument (bound, fully grounded)</li>
        <li>`+`: input argument (bound, possibly not fully grounded)</li>
        <li>`-`: output argument (bounded or not bounded)</li>
        <li>`--`: output argument (not bounded)</li>
        <li>`?`: either providing input or accepting output, or both.</li>
        <li>`[*]`: modifier indicating that an argument can have multiple solutions.</li>
      </ul>

## Argument domains ## {#arg_domains}
      <p>An N3 builtin often has an expected datatype for its arguments, called the [domain datatype](). If
        the datatype of an argument value, called the [value datatype](), does not match the
        domain datatype, it may be possible to cast the value's datatype to, or substitute it for, the domain
        datatype.</p>
      <p>The expected datatypes of arguments, i.e., domain datatypes, are defined per N3 builtin.</p>
      <p>If the [value datatype]() and [domain datatype]() do not match, and no casting or substitution is
        possible, the builtin statement will be considered false. (We point out that this is in line with the
        concept of the [builtin theory box](): a BPG search using the builtin statement will not match any
        statement in the theory box when literal datatypes do not match.)
      </p>

      <p>Below, we elaborate on the type casting, promotion or substitution that may be applied to align
        [domain datatypes]() with [value datatypes]().
      </p>

### Numeric datatype promotion and substitution ### {#numericdatatypepromotion}
  <p>If the numeric [value datatype]() does not match the [domain datatype](), it may be possible to
          promote or substitute the numeric value datatype:</p>

        <p><b>Numeric type promotion</b>: A numeric value datatype that [is derived from](https://www.w3.org/TR/xmlschema-2/#dt-derived) the domain datatype can
          be promoted to the latter (e.g., `xs:integer` is derived from `xs:decimal`). This is done by casting
          the original value to the required datatype.</p>
        <p>If there is no direct derivation relation between the value and domain datatype, the following
          numeric type promotions can take place:
        <ul>
          <li>A value of type `xs:float` (or any type derived from `xs:float`) can be promoted to type
            `xs:double`. The result is an `xs:double` value that is the same as the original value.</li>
          <li>A value of type `xs:decimal` (or any type derived from `xs:decimal`) can be promoted to either
            of the types `xs:float` or `xs:double`.</li>
        </ul>
        </p>

        <p><b>Numeric type substitution</b>: if <i>all values</i> have the same numeric datatype, and this
          datatype [is derived from](https://www.w3.org/TR/xmlschema-2/#dt-derived) the domain
          datatype (e.g., `xs:integer` is derived from `xs:decimal`), then the values can be used without any
          casting. For example, if two `xs:integer` values are used for input where `xs:decimal` domains are
          expected, then the values retain their datatype as `xs:integer`. The substituted numeric datatype
          (in this case, `xs:integer`) will also apply to the builtin's output, if any.</p>

        <p><b>Builtins operating on any numeric type</b>: some N3 builtins (e.g., `math:sum`) operate on values
          of any numeric type (i.e., `xs:numeric`, the union of `xs:double`, `xs:float`, and `xs:decimal`).
          I.e., their concrete input values may present any combination of numeric types. In that case, the
          builtin can only be applied if all value datatypes can be promoted into <i>a common numeric
            datatype</i> in the ordered list `(xs:integer, xs:decimal, xs:float, xs:double)`. If so, at that
          point, we rely on numeric type substitution. For instance:
        <ul>
          <li>For a builtin with `xs:numeric` domain datatypes, given two value datatypes `xs:integer` and
            `xs:decimal`, the `xs:integer` value will be promoted to `xs:decimal` as the common numeric
            datatype. At that point, the two `xs:decimal` datatypes can be substituted for `xs:numeric`
            (numeric type substitution). If the builtin has an output, then the calculated value for this
            output will also have datatype `xs:decimal`.</li>
          <li>For a builtin with `xs:numeric` domain datatypes, given two values with datatype `xs:integer`,
            the `xs:integer` datatype will simply be substituted for `xs:numeric`. If the builtin has an
            output, then the calculated value for the output will also have datatype `xs:integer`.</li>
        </ul>
        </p>
### Other kinds of datatype casting ### {#typesofdatatypecasting}
        <p>If the non-numeric [value datatype]() does not match the [domain datatype](), it may be
          possible to cast the value datatype to the domain datatype:</p>

        <p>
          <b>String</b>: A literal will be considered a "string" when it has an `xs:string` datatype, a
          `rdf:langString` datatype due to the presence of a language tag, or when it lacks a datatype.
        </p>

        <ul>
          <li><i>Casting from string</i>: if an input value has an `xs:string` datatype that does not match
            the
            domain, it may be possible to cast the string to the domain datatype, as [defined in XPath](https://www.w3.org/TR/xpath-functions/#casting-from-strings). The
            resulting value representation must be a valid lexical form for the domain datatype.</li>

          <li><i>Casting to string</i>: if an input value is an IRI, or any kind of literal (incl. type
            `xs:anyUri`
            or its derivations), and the domain is `xs:string`, then the value will be cast to a string as
            [defined in XPath](https://www.w3.org/TR/xpath-functions/#casting-to-string) along
            with additional rules defined for [SPARQL 1.1](https://www.w3.org/TR/sparql11-query/#FunctionMapping).
          </li>
        </ul>
        <p><b>Other datatypes</b>: other types of datatype casting may take place as [defined in XPath](https://www.w3.org/TR/xpath-functions/#casting).
        </p>
         <div class="note">
        <p><b>Editors' Note:</b><br><br>
        There is a useful chart for casting primitive types to primitive types in [XPath](https://www.w3.org/TR/xpath-functions/#casting-from-primitive-to-primitive), a
          subset of which is defined for [SPARQL 1.1](https://www.w3.org/TR/sparql11-query/#FunctionMapping).
        </div>
        
Builtin Evaluation {#builtinevaluation}
=====================
## Builtin theory box ## {#builtintheorybox}
      <p>A [builtin statement](#builtins) can be seen as a <i>constrained</i> basic graph pattern
        (BGP) search on the N3 [builtin theory box]().
        This builtin theory box is defined to include all truthful builtin statements for the N3 builtin.
        In case this BGP search matches one or more statements in the theory box,
        taking into account options for datatype casting, promotion, or substitution
        (see [Argument domains](#arg_domains))
        the N3 [builtin statement](#builtins) will be considered true.
      </p>

      <p>For eample, for the `math:sum` builtin, the [builtin theory box](#builtintheorybox) includes all grounded builtin
        statements of the form `($s.1 .. $s.n) math:sum $o .`, where argument values have datatype `xs:numeric`
        and, for each statement, the sum of `$s.1 .. $s.n` equals `$o`.
        Below, we give several examples of how this theory box is used to evaluate builtin
        statements.</p>
      <ul>
        <li>
          Using the builtin statement `(1 2 3) math:sum ?x .` as a BGP search on the theory box
          will return exactly one result where `?x` has value `6`.</li>
        <li>Using the concrete builtin statement `(1 2 3) math:sum 6 .` as a BGP search on the theory box will
          similarly match exactly 1 statement.</li>
      </ul>

      <p>Hence, in both cases, the builtin statement will be considered true,
        and the set of matching triples from the theory box will be used to instantiate the [builtin statement](#).
        In the first case, this will lead to a single instance of the builtin statement,
        where variable `?x` will be bound to value `6`.
        In the second case, the grounded builtin statement will itself serve as such an instance.</p>

      <div class="note" >
        <p><b>Editors' Note:</b><br><br>
        Note that there can be multiple matching triples, thus leading to multiple instances of the builtin
        statement.
        Consider the following example for the `list:member` builtin:<br><br>
        `( 1 2 3 ) list:member ?x .`<br>
        This will yield the following matching triples from the [builtin theory box](#builtintheorybox):<br>
        <br>
        `( 1 2 3 ) list:member 1 .`<br>
        `( 1 2 3 ) list:member 2 .`<br>
        `( 1 2 3 ) list:member 3 .`<br>
      </div>

      <p>The BGP search is <i>constrained</i> in order to avoid infinite numbers of results and
        intractable calculations; in other cases, constraints weigh utility vs. difficulty
        of implementation.
        For example, the <a>builtin statement</a> `(?a 1) math:sum 2` would match an infinite
        number of grounded builtin statements.
        In other cases, the BGP search is restricted due to practical considerations.
        For instance, <a>builtin statement</a> `(1 ?x) math:sum 6` would match only a single grounded
        builtin statement in the theory box, but this would complicate the implementation of the builtin for
        only limited utility (as other builtins can be used instead to subtract 1 from 6).
      </p>
      <p>These constraints are encoded in terms of <a>argument modes</a> and <a>domain datatypes</a>
        in the respective builtin definitions.
        In case these constraints are not met, the <a>builtin statement</a> will evaluate to false.
      </p>


Builtins {#builtins}
=====================
{{__CONTENT__}}


<h2 class="appendix">Acknowledgements</h2>
    <p>The editors acknowledge valuable contributions from...</p>
